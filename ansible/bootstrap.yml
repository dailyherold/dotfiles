---
- hosts: localhost
  remote_user: "{{ lookup('env','USER') }}"

  vars_files:
    - vars/defaults.yml

  pre_tasks:
    ## DEBUG
    #- debug: var=hostvars[inventory_hostname]
    #  tags: always
    #- debug: var=ansible_facts
    #  tags: always

    ## Include user var file if it exists
    - name: Look for user var file
      stat: path=vars/{{ ansible_facts['user_id'] }}.yml
      register: usr_vars
      tags: always

    - name: Include user var file if it exists
      include_vars: vars/{{ ansible_facts['user_id'] }}.yml
      when: usr_vars.stat.exists
      tags: always

    ## Distro specific tasks
    - name: Add Debian family distros to debian family group
      add_host:
        name: localhost
        group: debian_family
      when: (debian_other_distros is defined and ansible_facts['distribution'] in debian_other_distros) or ansible_facts['os_family'] == "Debian"
      tags: always

    - name: Add RedHat family distros to redhat family group
      add_host:
        name: localhost
        group: redhat_family
      when: (redhat_other_distros is defined and ansible_facts['distribution'] in redhat_other_distros) or ansible_facts['os_family'] == "RedHat"
      tags: always

    - debug:
        msg: "Provisioning based on the following groups: {{ group_names }}"
      tags: always

    - name: RedHat family tasks
      include: tasks/redhat.yml
      when: "'redhat_family' in group_names"

    - name: Debian family tasks
      include: tasks/debian.yml
      when: "'debian_family' in group_names"

    - name: Install/configure snap packages
      command: snap {{ item }}
      loop: "{{ snap_packages|flatten(levels=1) }}"
      become: yes
      tags: ["packages", "snap"]

    - name: Install Python packages
      pip:
        name: "{{ item }}"
        state: latest
      loop: "{{ pip_modules|flatten(levels=1) }}"
      become: yes
      tags: ["packages", "pip"]

    # Repos folders used by some roles
    - name: Ensure home repos folder
      file:
        state: directory
        path: "{{ repo_home }}/{{ item }}"
      loop:
        - git
        - svn

  roles:
    - { role: ssh, tags: [ 'ssh' ] }
    - { role: sublime, tags: [ 'sublime' ] }
    - { role: xcape, xcape_install_dir: "{{ ansible_facts['user_dir'] }}/repos/git", tags: [ 'xcape' ] }
    - { role: thinkpad, tags: [ 'thinkpad' ], when: thinkpad_workstation == true }
    - { role: dell, tags: [ 'dell' ], when: dell_workstation == true }
    - { role: hashicorp, tags: [ 'hashicorp' ] }
    - { role: docker, install_docker_compose: true, tags: [ 'docker' ] }
    - { role: kubernetes, tags: [ 'kubernetes' ] }
    - role: element
      vars:
        element_package: element-desktop
      tags: element
    - role: node
      vars:
        nvm_git_tag: v0.37.0
      tags: node
    - role: onlykey
      vars:
        onlykey_app_version: 5.3.0
      tags: onlykey
    - role: awscli-v2
      tags: awscli
    #- { role: mailpile, tags: [ 'mailpile' ] }
    #- { role: spideroak, tags: [ 'spideroak' ] }
    #- { role: weechat, tags: [ 'weechat' ] }
    #- { role: mellowplayer, tags: [ 'mellowplayer' ] }

  post_tasks:
    - name: Setup git config
      template:
        dest: "{{ ansible_facts['user_dir'] }}/.gitconfig"
        src: templates/.gitconfig.j2
      tags: ["git"]

    - name: Set default git commit template
      copy:
        dest: "{{ ansible_facts['user_dir'] }}/.gitcommit.txt"
        src: files/.gitcommit.txt
      tags: ["git"]

    - name: Ensure dev directory
      file:
        state: directory
        path: "{{ dev_home }}"

    - name: Symlink dotfiles
      command: bin/dfm install chdir={{ ansible_facts['user_dir'] }}/.dotfiles

    # Refresh fonts after .fonts was symlinked from dotfiles repo
    - name: Refresh font cache
      command: /usr/bin/fc-cache -vf {{ ansible_facts['user_dir'] }}/.fonts

    - name: Ensure vim swp and backup directories
      file: state=directory path={{ item }}
      loop:
        - "{{ ansible_facts['user_dir'] }}/.vim/backup"
        - "{{ ansible_facts['user_dir'] }}/.vim/swp"

    # TODO: this won't work because on start up vim complains about certain functions not
    # being available and asking to press enter to continue. The plugin install command
    # fixes that, but need to see if there is a way to silence any start up warning/errors
    #
    #- name: Install vim plugins
    #  command: /usr/bin/vim +PluginInstall +qall

    # Useful for IDEs
    # https://confluence.jetbrains.com/display/IDEADEV/Inotify+Watches+Limit
    - name: Increase default inotify watches limit
      copy:
        dest: /etc/sysctl.d/60-inotify.conf
        src: files/60-inotify.conf
      become: yes

    - name: Set custom libinput device settings
      copy:
        dest: /etc/X11/xorg.conf.d/
        src: "{{ item }}"
        backup: yes
      loop:
        - files/30-pointers.conf
      become: yes
      when: custom_libinput == true
      tags: ["libinput"]

    - name: Change .dotfiles repo from https to ssh
      shell: "git remote set-url origin git@github.com:dailyherold/dotfiles.git"
      when: ansible_facts['user_id'] == 'jpherold' or ansible_facts['user_id'] == 'dailyherold'

    - name: Change prezto repo fork from https to ssh
      shell: "git remote set-url origin git@github.com:dailyherold/prezto.git"
      args:
        chdir: ../.zprezto/
      when: ansible_facts['user_id'] == 'jpherold' or ansible_facts['user_id'] == 'dailyherold'

    - name: Set zsh as default shell
      user:
        name: "{{ ansible_facts['user_id'] }}"
        shell: /bin/zsh
        state: present
      become: yes
      when: usr_shell == 'zsh'

    # fzf
    - name: Git clone fzf
      git:
        repo: https://github.com/junegunn/fzf.git
        dest: "{{ ansible_facts['user_dir'] }}/.fzf"
        depth: 1
        update: yes
      tags: fzf

    - name: You're not done yet!
      debug: msg="Install fzf by running ~/.fzf/install"
      tags: fzf

    # tmux plugin manager
    - name: Git clone tmux plugin manager (tpm) repo
      git:
        repo: https://github.com/tmux-plugins/tpm
        dest: "{{ ansible_facts['user_dir'] }}/.tmux/plugins/tpm"
        accept_hostkey: yes
        update: yes
      tags: ["tmux","tpm"]

    - name: You're not done yet!
      debug: msg="Install tmux plugins by executing prefix + I in a tmux session"
      tags: ["tmux","tpm"]

    # youtube-dl
    - name: Download youtube-dl
      get_url:
        url: https://yt-dl.org/downloads/latest/youtube-dl
        dest: /usr/local/bin/youtube-dl
        mode: a+rx
      become: yes
      tags: ["youtube-dl"]
