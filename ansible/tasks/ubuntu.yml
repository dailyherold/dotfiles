---
  - name: Update packages
    apt: upgrade=yes update_cache=yes
    become: yes
    tags:
      - packages

  - name: Install default packages
    apt: name={{ item }} state=latest
    with_items: "{{ packages }}"
    become: yes
    tags:
      - packages

  - name: Install debian specific packages
    apt: name={{ item }} state=latest
    with_items: "{{ debian_packages }}"
    become: yes
    tags:
      - packages

  - name: Install utility packages
    apt: name={{ item }} state=latest
    with_items: "{{ extra_packages }}"
    become: yes
    tags:
      - packages
      - utilities

# Git repos dir
  - name: Create git repos dir
    file:
      dest: "{{ current_user_home }}/repos/git"
      state: directory
    tags: dir

# Yubikey
#  - name: Install Yubikey ppa using apt_repository module (not working with Mint right now)
#    apt_repository:
#      repo: 'ppa:yubico/stable'
#    tags: yubikey
  - name: Install Yubikey ppa using shell
    shell: 'add-apt-repository -y ppa:yubico/stable'
    become: yes
    tags: yubikey

  - name: Install Yubikey manager
    apt:
      update_cache: yes
      name: yubikey-neo-manager
      state: latest
    become: yes
    tags: ["yubikey", "packages"]

  - name: Download u2f.rules #https://www.yubico.com/faq/enable-u2f-linux/
    get_url:
      dest: /etc/udev/rules.d/u2f.rules
      url: https://raw.githubusercontent.com/Yubico/libu2f-host/master/70-u2f.rules
    become: yes
    tags: yubikey

# Solarized
  - name: Install dconf
    apt:
      name: dconf-cli
      state: latest
    become: yes
    tags: ["solarized","solarized-gnome","packages"]

  - name: Clone gnome terminal solarized colors
    git:
      repo: git@github.com:Anthony25/gnome-terminal-colors-solarized.git
      dest: "{{ current_user_home }}/repos/git/gnome-terminal-colors-solarized"
      accept_hostkey: yes
      update: yes
    tags: ["solarized","solarized-gnome"]

  - name: Set gnome-terminal-colors-solarized
    shell: ./set_dark.sh
    args:
      chdir: "{{ current_user_home }}/repos/git/gnome-terminal-colors-solarized"
      executable: yes
    tags: ["solarized","solarized-gnome"]

  - name: Clone solarized dir-colors
    git:
      repo: git@github.com:seebi/dircolors-solarized.git
      dest: "{{ current_user_home }}/repos/git/dircolors-solarized"
      accept_hostkey: yes
      update: yes
    tags: ["solarized","solarized-dircolors"]

  - name: Clone solarized colorscheme for Guake
    git:
      repo: https://github.com/coolwanglu/guake-colors-solarized.git
      dest: "{{ current_user_home }}/repos/git/guake-colors-solarized"
      accept_hostkey: yes
      update: yes
    tags: ["solarized","guake"]

  - name: Set guake solarized colorscheme
    shell: ./set_dark.sh
    args:
      chdir: "{{ current_user_home }}/repos/git/guake-colors-solarized"
      executable: yes
    tags: ["solarized","guake"]

# Sensors
  - name: Install lm-sensors
    apt:
      name: lm-sensors
      state: latest
    become: yes
    tags: ["sensors","packages"]

  - name: Detect sensors
    shell: sensors-detect
    become: yes
    tags: sensors

  - name: View sensors
    shell: sensors
    register: sensors_output
    tags: sensors

  - name: Show sensors data
    debug: var=sensors_output
    tags: sensors

  - name: Add Psensor ppa
    shell: 'apt-add-repository -y ppa:jfi/ppa'
    become: yes
    tags: sensors

  - name: Install Psensor
    apt:
      update_cache: yes
      name: psensor
      state: latest
    become: yes
    tags: ["sensors", "packages"]

# Diodon
  - name: Add Diodon ppa
    shell: 'apt-add-repository -y ppa:diodon-team/stable'
    become: yes
    tags: diodon

  - name: Install Diodon
    apt:
      update_cache: yes
      name: diodon
      state: latest
    become: yes
    tags: ["diodon","packages"]

# tmux plugin manager
  - name: Clone tpm repo
    git:
      repo: https://github.com/tmux-plugins/tpm
      dest: "{{ current_user_home }}/.tmux/plugins/tpm"
      accept_hostkey: yes
      update: yes
    tags: ["tmux","tpm"]

# HAL for some native encrypted flash streaming support
  - name: Add hal-flash ppa
    shell: 'add-apt-repository -y ppa:flexiondotorg/hal-flash'
    become: yes
    tags: flash

  - name: Install hal-flash
    apt:
      update_cache: yes
      name: libhal1-flash
      state: latest
    become: yes
    tags: ["flash","packages"]

  - name: Clear Adobe access directories
    shell: rm -rf NativeCache AssetCache APSPrivateData2
    args:
      chdir: "{{ current_user_home }}/.adobe/Flash_Player"
    tags: flash

# Weechat
  - name: Add gpg key for Weechat repo
    apt_key:
      keyserver: keys.gnupg.net
      id: 11E9DE8848F2B65222AA75B8D1820DB22A11534E
      state: present
    become: yes
    tags: weechat

  - name: Add Weechat repo
    apt_repository:
      repo: deb https://weechat.org/ubuntu trusty main
      state: present
    become: yes
    tags: weechat

  - name: Install Weechat
    apt:
      update_cache: yes
      name: "{{ item }}"
      state: latest
    with_items:
      - weechat-curses
      - weechat-plugins
      - weechat-doc
    become: yes
    tags: ["weechat","packages"]

# Dropbox
  - name: Install Dropbox
    apt:
      name: "{{ item }}"
      state: latest
    with_items:
      - dropbox
      - nemo-dropbox
    become: yes
    tags: ["dropbox","packages"]

# nvPY (Notes)
  - name: Ensure nvPY dependencies
    apt:
      state: latest
      name: "{{ item }}"
    with_items:
      - python
      - python-tk
      - python-pip
      - python-markdown
    become: yes
    tags: ["nvpy","packages"]

  - name: Install nvPY
    pip:
      state: latest
      name: nvpy
    become: yes
    tags: ["nvpy","packages"]

  - name: Set nvPY's conf for local notes synced to Dropbox dir
    copy:
      src: .nvpy.cfg
      dest: "{{ current_user_home }}"
    tags: ["nvpy","config"]

# Ant
  - name: Download Ant
    get_url:
      url: http://www.webhostingjams.com/mirror/apache//ant/binaries/apache-ant-{{ ant_version }}-bin.tar.gz
      dest: "{{ current_user_home }}/Downloads"
    register: ant_archive
    tags: ant

  - name: Unarchive Ant
    unarchive:
      src: "{{ ant_archive.dest }}"
      dest: /opt
    become: yes
    register: ant
    tags: ant

  - name: symlink apache-ant-version to apache-ant
    file:
      state: link
      src: /opt/apache-ant-{{ ant_version }}
      dest: /opt/apache-ant
    become: yes
    tags: ant

# Verse
  - name: Install verse
    apt:
      name: verse
      state: latest
    become: yes
    tags: ["verse","packages"]

# Beyond Compare
  - name: Download Beyond Compare 4
    get_url:
      url: http://www.scootersoftware.com/bcompare-{{ beyondcompare_version }}_amd64.deb
      dest: "{{ current_user_home }}/Downloads"
    register: beyondcompare
    tags: beyondcompare

  - name: Install Beyond Compare 4
    apt:
      deb: "{{ beyondcompare.dest }}"
      state: present
    become: yes
    tags: ["beyondcompare","packages"]

# Terraform
  - name: Download Terraform
    get_url:
      url: https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip
      dest: "{{ current_user_home }}/Downloads"
    register: terraform_archive
    tags: terraform

  - name: Ensure /opt/terraform
    file:
      state: directory
      path: /opt/terraform
    become: yes
    register: terraform
    tags: terraform

  - name: Unarchive Terraform
    unarchive:
      src: "{{ terraform_archive.dest }}"
      dest: "{{ terraform.path }}"
    become: yes
    tags: terraform

# Vagrant
  - name: Download Vagrant
    get_url:
      url: https://releases.hashicorp.com/vagrant/{{ vagrant_version }}/vagrant_{{ vagrant_version }}_x86_64.deb
      dest: "{{ current_user_home }}/Downloads"
    register: vagrant_deb
    tags: vagrant

  - name: Install Vagrant deb
    apt:
      state: present
      deb: "{{ vagrant_deb.dest }}"
    become: yes
    tags: ["vagrant","packages"]

# mdless (markdown less)
  - name: Install mdless gem
    gem:
      state: latest
      name: mdless
    become: yes
    tags: ["mdless","gem"]

# sdkman
  - name: Download sdkman script
    get_url:
      dest: "{{ current_user_home }}/sdkman_install"
      url: http://get.sdkman.io
      mode: "u+x,g+x,o+x"
    register: sdkman_script
    tags: sdkman

  - debug: var=sdkman_script
    tags: sdkman

  - name: Install sdkman
    command: /bin/bash {{ sdkman_script.dest }}
    register: sdkman_install
    tags: sdkman

  - debug: msg={{ sdkman_install.stdout }}
    tags: sdkman

# Jetbrains DataGrip
  - name: Download DataGrip
    get_url:
      dest: "{{ current_user_home }}/Downloads"
      url: https://download.jetbrains.com/datagrip/datagrip-{{ datagrip_version }}-custom-jdk-linux.tar.gz
      validate_certs: no
    register: datagrip_archive
    tags: datagrip

  - name: Unarchive DataGrip
    unarchive:
      dest: "{{ current_user_home }}"
      src: "{{ datagrip_archive.dest }}"
    tags: datagrip

# fzf
  - name: Git clone fzf
    git:
      repo: https://github.com/junegunn/fzf.git
      dest: "{{ current_user_home }}/.fzf"
      depth: 1
      update: yes
    tags: fzf

#  - name: Install fzf
#    shell: "{{ current_user_home }}/.fzf/install --all"
#    args:
#     chdir: "{{ current_user_home }}/.fzf"
#      executable: yes
#    tags: fzf

  - name: You're not done yet!
    debug: msg="Install fzf by running ~/.fzf/install"
    tags: fzf

# albert launcher
  - name: Add albert ppa
    shell: 'add-apt-repository -y ppa:flexiondotorg/albert'
    become: yes
    tags: albert

  - name: Install albert
    apt:
      update_cache: yes
      name: albert
      state: latest
    become: yes
    tags: ["albert","packages"]

# plank dock
  - name: Add plank ppa
    shell: 'add-apt-repository -y ppa:docky-core/stable'
    become: yes
    tags: plank

  - name: Install plank
    apt:
      #update_cache: yes
      name: plank
      state: latest
    become: yes
    tags: ["plank","packages"]

# Eclipse
  - name: download Eclipse EE
    get_url:
      dest: "{{ current_user_home }}/Downloads"
      url: http://eclipse.mirror.rafal.ca/technology/epp/downloads/release/{{ eclipse_release_name }}/{{ eclipse_minor_version }}/eclipse-jee-{{ eclipse_release_name }}-{{ eclipse_minor_version }}-linux-gtk-x86_64.tar.gz
      validate_certs: no
    register: eclipse_archive
    tags: eclipse

  - name: Unarchive Eclipse
    unarchive:
      dest: /opt
      src: "{{ eclipse_archive.dest }}"
    become: yes
    tags: eclipse

  - name: Copy Eclipse launcher shortcut
    copy:
      src: eclipse.desktop
      dest: /usr/share/applications
    become: yes
    tags: eclipse
